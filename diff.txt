diff --git a/packages/core/types/dll.d.ts b/packages/core/types/dll.d.ts
index 54b2f58..b98338e 100644
--- a/packages/core/types/dll.d.ts
+++ b/packages/core/types/dll.d.ts
@@ -25,9 +25,9 @@ declare namespace nodemod {
     /** void	(*pfnSetAbsBox)( edict_t *pent ); */
     setAbsBox(pent: Entity): void;
     /** void	(*pfnSaveWriteFields)( SAVERESTOREDATA*, const char*, void*, TYPEDESCRIPTION*, int ); */
-    saveWriteFields(value0: SaveRestoreData, value1: string, value2: ArrayBuffer | null, value3: TypeDescription, value4: number): void;
+    saveWriteFields(value0: SaveRestoreData, value1: string, value2: any, value3: TypeDescription, value4: number): void;
     /** void	(*pfnSaveReadFields)( SAVERESTOREDATA*, const char*, void*, TYPEDESCRIPTION*, int ); */
-    saveReadFields(value0: SaveRestoreData, value1: string, value2: ArrayBuffer | null, value3: TypeDescription, value4: number): void;
+    saveReadFields(value0: SaveRestoreData, value1: string, value2: any, value3: TypeDescription, value4: number): void;
     /** void	(*pfnSaveGlobalState)( SAVERESTOREDATA * ); */
     saveGlobalState(value0: SaveRestoreData): void;
     /** void	(*pfnRestoreGlobalState)( SAVERESTOREDATA * ); */
@@ -79,11 +79,11 @@ declare namespace nodemod {
     /** char	(*pfnPM_FindTextureType)( const char *name ); */
     pMFindTextureType(name: string): number;
     /** void	(*pfnSetupVisibility)( struct edict_s *pViewEntity, struct edict_s *pClient, unsigned char **pvs, unsigned char **pas ); */
-    setupVisibility(pViewEntity: Entity, pClient: Entity, pvs: Uint8Array, pas: Uint8Array): void;
+    setupVisibility(pViewEntity: Entity, pClient: Entity, pvs: number[], pas: number[]): void;
     /** void	(*pfnUpdateClientData) ( const struct edict_s *ent, int sendweapons, struct clientdata_s *cd ); */
     updateClientData(ent: Entity, sendweapons: number, cd: ClientData): void;
     /** int	(*pfnAddToFullPack)( struct entity_state_s *state, int e, edict_t *ent, edict_t *host, int hostflags, int player, unsigned char *pSet ); */
-    addToFullPack(state: EntityState, e: number, ent: Entity, host: Entity, hostflags: number, player: number, pSet: Uint8Array): number;
+    addToFullPack(state: EntityState, e: number, ent: Entity, host: Entity, hostflags: number, player: number, pSet: number[]): number;
     /** void	(*pfnCreateBaseline)( int player, int eindex, struct entity_state_s *baseline, struct edict_s *entity, int playermodelindex, vec3_t player_mins, vec3_t player_maxs ); */
     createBaseline(player: number, eindex: number, baseline: EntityState, entity: Entity, playermodelindex: number, player_mins: number[], player_maxs: number[]): void;
     /** void	(*pfnRegisterEncoders)( void ); */
diff --git a/packages/core/types/engine.d.ts b/packages/core/types/engine.d.ts
index dbd5f9e..a6ed4b5 100644
--- a/packages/core/types/engine.d.ts
+++ b/packages/core/types/engine.d.ts
@@ -131,9 +131,9 @@ declare namespace nodemod {
     /** void	(*pfnEngineFprintf)( FILE *pfile, const char *szFmt, ... ); */
     engineFprintf(pfile: FileHandle, szFmt: string, ...args: any[]): void;
     /** void*	(*pfnPvAllocEntPrivateData)( edict_t *pEdict, int cb ); */
-    pvAllocEntPrivateData(pEdict: Entity, cb: number): ArrayBuffer | null;
+    pvAllocEntPrivateData(pEdict: Entity, cb: number): any;
     /** void*	(*pfnPvEntPrivateData)( edict_t *pEdict ); */
-    pvEntPrivateData(pEdict: Entity): ArrayBuffer | null;
+    pvEntPrivateData(pEdict: Entity): any;
     /** void	(*pfnFreeEntPrivateData)( edict_t *pEdict ); */
     freeEntPrivateData(pEdict: Entity): void;
     /** const char *(*pfnSzFromIndex)( int iString ); */
@@ -153,7 +153,7 @@ declare namespace nodemod {
     /** edict_t*	(*pfnFindEntityByVars)( struct entvars_s* pvars ); */
     findEntityByVars(pvars: Entvars): Entity;
     /** void*	(*pfnGetModelPtr)( edict_t* pEdict ); */
-    getModelPtr(pEdict: Entity): ArrayBuffer | null;
+    getModelPtr(pEdict: Entity): any;
     /** int	(*pfnRegUserMsg)( const char *pszName, int iSize ); */
     regUserMsg(pszName: string, iSize: number): number;
     /** void	(*pfnAnimationAutomove)( const edict_t* pEdict, float flTime ); */
@@ -161,9 +161,9 @@ declare namespace nodemod {
     /** void	(*pfnGetBonePosition)( const edict_t* pEdict, int iBone, float *rgflOrigin, float *rgflAngles ); */
     getBonePosition(pEdict: Entity, iBone: number, rgflOrigin: number[], rgflAngles: number[]): void;
     /** void* (*pfnFunctionFromName)( const char *pName ); */
-    functionFromName(pName: string): ArrayBuffer | null;
+    functionFromName(pName: string): any;
     /** const char *(*pfnNameForFunction)( void *function ); */
-    nameForFunction(callback: ArrayBuffer | null): string;
+    nameForFunction(callback: any): string;
     /** void	(*pfnClientPrintf)( edict_t* pEdict, PRINT_TYPE ptype, const char *szMsg ); // JOHN: engine callbacks so game DLL can print messages to individual clients */
     clientPrintf(pEdict: Entity, ptype: number, szMsg: string): void;
     /** void	(*pfnServerPrint)( const char *szMsg ); */
@@ -187,9 +187,9 @@ declare namespace nodemod {
     /** void	(*pfnCrosshairAngle)( const edict_t *pClient, float pitch, float yaw ); */
     crosshairAngle(pClient: Entity, pitch: number, yaw: number): void;
     /** byte*	(*pfnLoadFileForMe)( const char *filename, int *pLength ); */
-    loadFileForMe(filename: string, pLength: number[]): ArrayBuffer | null;
+    loadFileForMe(filename: string, pLength: number[]): number[];
     /** void	(*pfnFreeFile)( void *buffer ); */
-    freeFile(buffer: ArrayBuffer | null): void;
+    freeFile(buffer: any): void;
     /** void	(*pfnEndSection)( const char *pszSectionName ); // trigger_endsection */
     endSection(pszSectionName: string): void;
     /** int	(*pfnCompareFileTime)( char *filename1, char *filename2, int *iCompare ); */
@@ -245,17 +245,17 @@ declare namespace nodemod {
     /** void	(*pfnPlaybackEvent)( int flags, const edict_t *pInvoker, unsigned short eventindex, float delay, const float *origin, const float *angles, float fparam1, float fparam2, int iparam1, int iparam2, int bparam1, int bparam2 ); */
     playbackEvent(flags: number, pInvoker: Entity, eventindex: number, delay: number, origin: number[], angles: number[], fparam1: number, fparam2: number, iparam1: number, iparam2: number, bparam1: number, bparam2: number): void;
     /** unsigned char *(*pfnSetFatPVS)( const float *org ); */
-    setFatPVS(org: number[]): Uint8Array;
+    setFatPVS(org: number[]): number[];
     /** unsigned char *(*pfnSetFatPAS)( const float *org ); */
-    setFatPAS(org: number[]): Uint8Array;
+    setFatPAS(org: number[]): number[];
     /** int	(*pfnCheckVisibility )( const edict_t *entity, unsigned char *pset ); */
-    checkVisibility(entity: Entity, pset: Uint8Array): number;
+    checkVisibility(entity: Entity, pset: number[]): number;
     /** void	(*pfnDeltaSetField)	( struct delta_s *pFields, const char *fieldname ); */
     deltaSetField(pFields: Delta, fieldname: string): void;
     /** void	(*pfnDeltaUnsetField)( struct delta_s *pFields, const char *fieldname ); */
     deltaUnsetField(pFields: Delta, fieldname: string): void;
     /** void	(*pfnDeltaAddEncoder)( const char *name, void (*conditionalencode)( struct delta_s *pFields, const unsigned char *from, const unsigned char *to ) ); */
-    deltaAddEncoder(name: string, value1: ArrayBuffer | null): void;
+    deltaAddEncoder(name: string, value1: any): void;
     /** int	(*pfnGetCurrentPlayer)( void ); */
     getCurrentPlayer(): number;
     /** int	(*pfnCanSkipPlayer)( const edict_t *player ); */
@@ -277,7 +277,7 @@ declare namespace nodemod {
     /** void	(*pfnGetPlayerStats)( const edict_t *pClient, int *ping, int *packet_loss ); */
     getPlayerStats(pClient: Entity, ping: number[], packet_loss: number[]): void;
     /** void	(*pfnAddServerCommand)( const char *cmd_name, void (*function) (void) ); */
-    addServerCommand(cmd_name: string, value1: ArrayBuffer | null): void;
+    addServerCommand(cmd_name: string, value1: any): void;
     /** qboolean	(*pfnVoice_GetClientListening)(int iReceiver, int iSender); */
     voiceGetClientListening(iReceiver: number, iSender: number): boolean;
     /** qboolean	(*pfnVoice_SetClientListening)(int iReceiver, int iSender, qboolean bListen); */
@@ -285,9 +285,9 @@ declare namespace nodemod {
     /** const char *(*pfnGetPlayerAuthId)		( edict_t *e ); */
     getPlayerAuthId(e: Entity): string;
     /** void	*(*pfnSequenceGet)( const char *fileName, const char *entryName ); */
-    sequenceGet(fileName: string, entryName: string): ArrayBuffer | null;
+    sequenceGet(fileName: string, entryName: string): any;
     /** void	*(*pfnSequencePickSentence)( const char *groupName, int pickMethod, int *picked ); */
-    sequencePickSentence(groupName: string, pickMethod: number, picked: number[]): ArrayBuffer | null;
+    sequencePickSentence(groupName: string, pickMethod: number, picked: number[]): any;
     /** int	(*pfnGetFileSize)( const char *filename ); */
     getFileSize(filename: string): number;
     /** unsigned int (*pfnGetApproxWavePlayLen)( const char *filepath ); */
diff --git a/packages/core/types/events.d.ts b/packages/core/types/events.d.ts
index 7b6b18e..6622cf1 100644
--- a/packages/core/types/events.d.ts
+++ b/packages/core/types/events.d.ts
@@ -64,20 +64,20 @@ declare namespace nodemod {
      * Event handler for dllSaveWriteFields
      * @param value0 SAVERESTOREDATA* - SaveRestoreData
      * @param value1 const char* - string
-     * @param value2 void* - ArrayBuffer | null
+     * @param value2 void* - any
      * @param value3 TYPEDESCRIPTION* - TypeDescription
      * @param value4 int - number
      */
-    "dllSaveWriteFields": (value0: SaveRestoreData, value1: string, value2: ArrayBuffer | null, value3: TypeDescription, value4: number) => void;
+    "dllSaveWriteFields": (value0: SaveRestoreData, value1: string, value2: any, value3: TypeDescription, value4: number) => void;
     /**
      * Event handler for dllSaveReadFields
      * @param value0 SAVERESTOREDATA* - SaveRestoreData
      * @param value1 const char* - string
-     * @param value2 void* - ArrayBuffer | null
+     * @param value2 void* - any
      * @param value3 TYPEDESCRIPTION* - TypeDescription
      * @param value4 int - number
      */
-    "dllSaveReadFields": (value0: SaveRestoreData, value1: string, value2: ArrayBuffer | null, value3: TypeDescription, value4: number) => void;
+    "dllSaveReadFields": (value0: SaveRestoreData, value1: string, value2: any, value3: TypeDescription, value4: number) => void;
     /**
      * Event handler for dllSaveGlobalState
      * @param value0 SAVERESTOREDATA * - SaveRestoreData
@@ -210,10 +210,10 @@ declare namespace nodemod {
      * Event handler for dllSetupVisibility
      * @param pViewEntity struct edict_s * - Entity
      * @param pClient struct edict_s * - Entity
-     * @param pvs unsigned char ** - Uint8Array
-     * @param pas unsigned char ** - Uint8Array
+     * @param pvs unsigned char ** - number[]
+     * @param pas unsigned char ** - number[]
      */
-    "dllSetupVisibility": (pViewEntity: Entity, pClient: Entity, pvs: Uint8Array, pas: Uint8Array) => void;
+    "dllSetupVisibility": (pViewEntity: Entity, pClient: Entity, pvs: number[], pas: number[]) => void;
     /**
      * Event handler for dllUpdateClientData
      * @param ent const struct edict_s * - Entity
@@ -229,9 +229,9 @@ declare namespace nodemod {
      * @param host edict_t * - Entity
      * @param hostflags int - number
      * @param player int - number
-     * @param pSet unsigned char * - Uint8Array
+     * @param pSet unsigned char * - number[]
      */
-    "dllAddToFullPack": (state: EntityState, e: number, ent: Entity, host: Entity, hostflags: number, player: number, pSet: Uint8Array) => void;
+    "dllAddToFullPack": (state: EntityState, e: number, ent: Entity, host: Entity, hostflags: number, player: number, pSet: number[]) => void;
     /**
      * Event handler for dllCreateBaseline
      * @param player int - number
@@ -355,20 +355,20 @@ declare namespace nodemod {
      * Event handler for postDllSaveWriteFields
      * @param value0 SAVERESTOREDATA* - SaveRestoreData
      * @param value1 const char* - string
-     * @param value2 void* - ArrayBuffer | null
+     * @param value2 void* - any
      * @param value3 TYPEDESCRIPTION* - TypeDescription
      * @param value4 int - number
      */
-    "postDllSaveWriteFields": (value0: SaveRestoreData, value1: string, value2: ArrayBuffer | null, value3: TypeDescription, value4: number) => void;
+    "postDllSaveWriteFields": (value0: SaveRestoreData, value1: string, value2: any, value3: TypeDescription, value4: number) => void;
     /**
      * Event handler for postDllSaveReadFields
      * @param value0 SAVERESTOREDATA* - SaveRestoreData
      * @param value1 const char* - string
-     * @param value2 void* - ArrayBuffer | null
+     * @param value2 void* - any
      * @param value3 TYPEDESCRIPTION* - TypeDescription
      * @param value4 int - number
      */
-    "postDllSaveReadFields": (value0: SaveRestoreData, value1: string, value2: ArrayBuffer | null, value3: TypeDescription, value4: number) => void;
+    "postDllSaveReadFields": (value0: SaveRestoreData, value1: string, value2: any, value3: TypeDescription, value4: number) => void;
     /**
      * Event handler for postDllSaveGlobalState
      * @param value0 SAVERESTOREDATA * - SaveRestoreData
@@ -501,10 +501,10 @@ declare namespace nodemod {
      * Event handler for postDllSetupVisibility
      * @param pViewEntity struct edict_s * - Entity
      * @param pClient struct edict_s * - Entity
-     * @param pvs unsigned char ** - Uint8Array
-     * @param pas unsigned char ** - Uint8Array
+     * @param pvs unsigned char ** - number[]
+     * @param pas unsigned char ** - number[]
      */
-    "postDllSetupVisibility": (pViewEntity: Entity, pClient: Entity, pvs: Uint8Array, pas: Uint8Array) => void;
+    "postDllSetupVisibility": (pViewEntity: Entity, pClient: Entity, pvs: number[], pas: number[]) => void;
     /**
      * Event handler for postDllUpdateClientData
      * @param ent const struct edict_s * - Entity
@@ -520,9 +520,9 @@ declare namespace nodemod {
      * @param host edict_t * - Entity
      * @param hostflags int - number
      * @param player int - number
-     * @param pSet unsigned char * - Uint8Array
+     * @param pSet unsigned char * - number[]
      */
-    "postDllAddToFullPack": (state: EntityState, e: number, ent: Entity, host: Entity, hostflags: number, player: number, pSet: Uint8Array) => void;
+    "postDllAddToFullPack": (state: EntityState, e: number, ent: Entity, host: Entity, hostflags: number, player: number, pSet: number[]) => void;
     /**
      * Event handler for postDllCreateBaseline
      * @param player int - number
@@ -1052,9 +1052,9 @@ declare namespace nodemod {
     "engFunctionFromName": (pName: string) => void;
     /**
      * Event handler for engNameForFunction
-     * @param callback void * - ArrayBuffer | null
+     * @param callback void * - any
      */
-    "engNameForFunction": (callback: ArrayBuffer | null) => void;
+    "engNameForFunction": (callback: any) => void;
     /**
      * Event handler for engClientPrintf
      * @param pEdict edict_t* - Entity
@@ -1125,9 +1125,9 @@ declare namespace nodemod {
     "engLoadFileForMe": (filename: string, pLength: number[]) => void;
     /**
      * Event handler for engFreeFile
-     * @param buffer void * - ArrayBuffer | null
+     * @param buffer void * - any
      */
-    "engFreeFile": (buffer: ArrayBuffer | null) => void;
+    "engFreeFile": (buffer: any) => void;
     /**
      * Event handler for engEndSection
      * @param pszSectionName const char * - string
@@ -1323,9 +1323,9 @@ declare namespace nodemod {
     /**
      * Event handler for engCheckVisibility
      * @param entity const edict_t * - Entity
-     * @param pset unsigned char * - Uint8Array
+     * @param pset unsigned char * - number[]
      */
-    "engCheckVisibility": (entity: Entity, pset: Uint8Array) => void;
+    "engCheckVisibility": (entity: Entity, pset: number[]) => void;
     /**
      * Event handler for engDeltaSetField
      * @param pFields struct delta_s * - Delta
@@ -1341,9 +1341,9 @@ declare namespace nodemod {
     /**
      * Event handler for engDeltaAddEncoder
      * @param name const char * - string
-     * @param value1 void* - ArrayBuffer | null
+     * @param value1 void* - any
      */
-    "engDeltaAddEncoder": (name: string, value1: ArrayBuffer | null) => void;
+    "engDeltaAddEncoder": (name: string, value1: any) => void;
     /**
      * Event handler for engGetCurrentPlayer
      */
@@ -1407,9 +1407,9 @@ declare namespace nodemod {
     /**
      * Event handler for engAddServerCommand
      * @param cmd_name const char * - string
-     * @param value1 void* - ArrayBuffer | null
+     * @param value1 void* - any
      */
-    "engAddServerCommand": (cmd_name: string, value1: ArrayBuffer | null) => void;
+    "engAddServerCommand": (cmd_name: string, value1: any) => void;
     /**
      * Event handler for engVoiceGetClientListening
      * @param iReceiver int - number
@@ -1976,9 +1976,9 @@ declare namespace nodemod {
     "postEngFunctionFromName": (pName: string) => void;
     /**
      * Event handler for postEngNameForFunction
-     * @param callback void * - ArrayBuffer | null
+     * @param callback void * - any
      */
-    "postEngNameForFunction": (callback: ArrayBuffer | null) => void;
+    "postEngNameForFunction": (callback: any) => void;
     /**
      * Event handler for postEngClientPrintf
      * @param pEdict edict_t* - Entity
@@ -2049,9 +2049,9 @@ declare namespace nodemod {
     "postEngLoadFileForMe": (filename: string, pLength: number[]) => void;
     /**
      * Event handler for postEngFreeFile
-     * @param buffer void * - ArrayBuffer | null
+     * @param buffer void * - any
      */
-    "postEngFreeFile": (buffer: ArrayBuffer | null) => void;
+    "postEngFreeFile": (buffer: any) => void;
     /**
      * Event handler for postEngEndSection
      * @param pszSectionName const char * - string
@@ -2247,9 +2247,9 @@ declare namespace nodemod {
     /**
      * Event handler for postEngCheckVisibility
      * @param entity const edict_t * - Entity
-     * @param pset unsigned char * - Uint8Array
+     * @param pset unsigned char * - number[]
      */
-    "postEngCheckVisibility": (entity: Entity, pset: Uint8Array) => void;
+    "postEngCheckVisibility": (entity: Entity, pset: number[]) => void;
     /**
      * Event handler for postEngDeltaSetField
      * @param pFields struct delta_s * - Delta
@@ -2265,9 +2265,9 @@ declare namespace nodemod {
     /**
      * Event handler for postEngDeltaAddEncoder
      * @param name const char * - string
-     * @param value1 void* - ArrayBuffer | null
+     * @param value1 void* - any
      */
-    "postEngDeltaAddEncoder": (name: string, value1: ArrayBuffer | null) => void;
+    "postEngDeltaAddEncoder": (name: string, value1: any) => void;
     /**
      * Event handler for postEngGetCurrentPlayer
      */
@@ -2331,9 +2331,9 @@ declare namespace nodemod {
     /**
      * Event handler for postEngAddServerCommand
      * @param cmd_name const char * - string
-     * @param value1 void* - ArrayBuffer | null
+     * @param value1 void* - any
      */
-    "postEngAddServerCommand": (cmd_name: string, value1: ArrayBuffer | null) => void;
+    "postEngAddServerCommand": (cmd_name: string, value1: any) => void;
     /**
      * Event handler for postEngVoiceGetClientListening
      * @param iReceiver int - number
diff --git a/packages/core/types/structures.d.ts b/packages/core/types/structures.d.ts
index f908380..15c2115 100644
--- a/packages/core/types/structures.d.ts
+++ b/packages/core/types/structures.d.ts
@@ -1082,35 +1082,35 @@ declare namespace nodemod {
   }
   /** Results from line/hull trace operations */
   interface TraceResult {
-    /** ACCESSOR_T(..., "fraction", flFraction, GETN, SETFLOAT) */
+    /** v8::String::NewFromUtf8(isolate, "fraction").ToLocalChecked(), v8::Number::New(isolate, trace->flFraction)) */
     fraction: number;
 
-    /** ACCESSOR_T(..., "planeDist", flPlaneDist, GETN, SETFLOAT) */
+    /** v8::String::NewFromUtf8(isolate, "planeDist").ToLocalChecked(), v8::Number::New(isolate, trace->flPlaneDist)) */
     planeDist: number;
 
-    /** ACCESSOR_T(..., "endPos", vecEndPos, GETVEC3, SETVEC3) */
-    endPos: number[];
+    /** v8::String::NewFromUtf8(isolate, "endPos").ToLocalChecked(), endPos) */
+    endPos: unknown;
 
-    /** ACCESSOR_T(..., "planeNormal", vecPlaneNormal, GETVEC3, SETVEC3) */
-    planeNormal: number[];
+    /** v8::String::NewFromUtf8(isolate, "planeNormal").ToLocalChecked(), planeNormal) */
+    planeNormal: unknown;
 
-    /** ACCESSOR_T(..., "hitGroup", iHitgroup, GETN, SETINT) */
-    hitGroup: number;
+    /** v8::String::NewFromUtf8(isolate, "hitGroup").ToLocalChecked(), v8::Integer::New(isolate, trace->iHitgroup)) */
+    hitGroup: unknown;
 
-    /** templ->SetNativeDataProperty("allSolid", ...) */
+    /** v8::String::NewFromUtf8(isolate, "allSolid").ToLocalChecked(), v8::Boolean::New(isolate, trace->fAllSolid)) */
     allSolid: boolean;
 
-    /** templ->SetNativeDataProperty("startSolid", ...) */
+    /** v8::String::NewFromUtf8(isolate, "startSolid").ToLocalChecked(), v8::Boolean::New(isolate, trace->fStartSolid)) */
     startSolid: boolean;
 
-    /** templ->SetNativeDataProperty("inOpen", ...) */
+    /** v8::String::NewFromUtf8(isolate, "inOpen").ToLocalChecked(), v8::Boolean::New(isolate, trace->fInOpen)) */
     inOpen: boolean;
 
-    /** templ->SetNativeDataProperty("inWater", ...) */
+    /** v8::String::NewFromUtf8(isolate, "inWater").ToLocalChecked(), v8::Boolean::New(isolate, trace->fInWater)) */
     inWater: boolean;
 
-    /** templ->SetNativeDataProperty("hit", ...) */
-    hit: Entity | null;
+    /** v8::String::NewFromUtf8(isolate, "hit").ToLocalChecked(), v8::Null(isolate)) */
+    hit: null;
   }
   /** Game entity reference with properties and methods */
   interface Entity {
